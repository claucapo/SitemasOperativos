#!/usr/bin/env perl

#use strict;
#use warnings;
# Reemplaza el print agregando \n automaticamente
use feature qw(say);

$VERSION = '1.0';

# =============================================================================
# Muestra el man page
# =============================================================================
sub mostrar_ayuda {
  print "
NOMBRE
     AFRALIST - Consultas y estadisticas de llamadas sospechosas

SINOPSIS
     AFRALIST [-r|-s] [-w] [-h] 

DESCRIPCION
     AFRALIST permite realizar consultas y estadiscas de llamadas
     sospechosas, tambien permite grabarlas en archivo.

OPCIONES
     -r   Consulta (excluyente con -s)

     -s   Estadistica (excluyente con -r)

     -w   Grabar resultados en archivo (requiere -r o -s)

     -h   Ayuda

ENTORNO
     BINDIR     Debe estar seteada por AFRAINIC
     PROCDIR    Apunta al directorio de llamadas sospechosas
     REPODIR    Apunta al directorio donde se general los reportes
     MAEDIR     Apunta al directorio de maestros

CONSULTAS
     Muestra menu principal de opciones de consultas
     1    Permite seleccionar los archivos a consultar
     2    Permite seleccionar los filtros
     3    Procesa los archivos seleccionados con los filtros
     4    Finaliza el programa

     Seleccion de archivos
          Se realiza ingresando el nombre o parte del nombre disponible 
          que se desea seleccionar 
     
     Seleccion de filtros
     1    Selecciona las centrales de un listado de centrales disponibles
     2    Selecciona los agentes de un listado de agentes disponibles
     3    Selecciona los umbrales de un listado de umbrales disponibles
     4    Selecciona los tipos de llamadas de un listado de tipos disponibles
     5    Selecciona un rango de tiempos de conversacion, primero debe
          ingresar un valor numerico de menor tiempo y luego un valor 
          numero de maximo tiempo de llamada a filtrar
     6    Selecciona los numeros A (numeros origen) ingresando el numero
          con formato <cod_area>;<numero_linea>
     7    Finaliza el programa

     Opciones comunes
          Blanco selecciona todos los disponibles
     T    Termina el proceso de seleccion y vuelve al menu anterior
     B    Borra todos los elementos seleccionados

     Procesar archivos seleccionados
          Si se indicó [-w] graba el resultado en el directorio REPODIR
          con nombre subllamada.xxx donde xxx es un contador, caso contrario
          emite el listado por pantalla

ESTADISTICAS
     Muestra menu principal de opciones de estadistica
     1    Permite seleccionar los archivos a consultar por periodo en
          formato <anio-llamada><mes-llamada>
               Blanco selecciona todos los disponibles
          T    Termina el proceso de seleccion y vuelve al menu anterior
          B    Borra todos los elementos seleccionados
     2    Ranking de llamadas sospechosas por central ordenado por cantidad de llamadas
     3    Ranking de llamadas sospechosas por central ordenado por tiempo de conversacion
     4    Ranking de llamadas sospechosas por oficina ordenado por cantidad de llamadas
     5    Ranking de llamadas sospechosas por oficina ordenado por tiempo de conversacion
     6    Ranking de llamadas sospechosas por agente ordenado por cantidad de llamadas
     7    Ranking de llamadas sospechosas por agente ordenado por tiempo de conversacion
     8    Ranking de llamadas sospechosas por destino
     9    Ranking de llamadas sospechosas por umbrales
     0    Finaliza el programa

     Si se indicó [-w] al ejecutar el programa, solicita nombre de archivo 
     y graba el resultado en el directorio REPODIR/estadisticas caso contrario
     emite el listado por pantalla

AUTORES
     Claudio Anibal Smith <claucapo@gmail.com>
     Lautaro de los Heros <lautarodelosheros@gmail.com>
     Nicolas Cian <nicolas.cian@gmail.com>
     Daniel Diaczun <danieldiaczun@hotmail.com>
     Adrián Ríssola <adryanpr@hotmail.com>
     Leandro Rinaldi <rinaldi.leandro@gmail.com>

VER MAS
     La documentacion de todo el sistema AFRA-I se encuentra en el archivo readme.\n";
  exit 1;

} # Fin: mostrar_ayuda

# =============================================================================
# Verifica que este correcto el entorno
# =============================================================================
sub verificar_entorno {
  # Verificamos que exista la variable de entorno BINDIR
  die "No se puede ejecutar: Primero debe correr AFRAINIC para preparar el entorno.\n" if not $ENV{'BINDIR'};

  # No puede correr si ya hay una instancia en ejecucion
  my @ps = `ps -ef | grep AFRALIST  | grep perl | grep -v grep`;
  die "Error: AFRALIST ya se esta ejecutando!\n" if @ps.size > 1;
  
  return 0
} # Fin: verifica_entorno

# =============================================================================
# Actua en funcion de los parametros ingresados
# =============================================================================
sub verificar_parametros {
  # Usamos este modulo para parsear los parametros
  use Getopt::Long;
  my $ayuda;
  my $consulta;
  my $estadistica;
  my $grabar;

  GetOptions ("h|help|?" => \$ayuda, "r|read" => \$consulta, "s|stat" => \$estadistica, "w|write" => \$grabar)
  or die("Error: argumentos invalidos. Ver documentacion: AFRALIST -h\n");

  # Muestra la ayuda
  &mostrar_ayuda if $ayuda;

  # Solo se puede usar -r o -s, nunca los dos a la vez
  die "Error: argumento [-r] no funciona con argumento [-s]. Ver documentacion: AFRALIST -h\n" if $consulta and $estadistica;
  # Solo se puede usar -w si se esta usando -r o -s, nunca solo.
  die "Error: argumento [-w] solo funciona con [-r] o con [-s]. Ver documentacion: AFRALIST -h\n" if $grabar and not ($consulta or $estadistica);
  # Debe utilizar alguno de los dos -r o -s
  die "Error: especificar argumento [-r|-s]. Ver documentacion: AFRALIST -h\n" if not $consulta and not $estadistica;

  &resolver_consulta($grabar) if $consulta;
  &resolver_estadistica($grabar) if $estadistica;

  return 0
} # Fin: verifica_parametros

# =============================================================================
# Borra la pantalla
# =============================================================================
sub clear {
  print "\033[2J"; # clear the screen
  print "\033[0;0H"; # jump to 0,0
}

# =============================================================================
# Elimina duplicados de un array
# =============================================================================
sub uniq {
  my %seen;
  grep !$seen{$_}++, @_;
}

# =============================================================================
# Procesa los archivos seleccionados y aplica los filtros
# =============================================================================
sub procesar_archivos {
  my ($archivos,$centrales,$agentes,$umbrales,$tipos,$numeros,$desde,$hasta) = @_;
  #say "Archivos seleccionados: @$archivos";
  #say "Filtros";
  if (scalar @$centrales > 0) {
    $central = join("|", @$centrales);
  } else {
    $central = '.*';
  }
  #say "Central: $central";
  if (scalar @$agentes > 0) {
    $agente = join("|", @$agentes);
  } else {
    $agente = '.*';
  }
  #say "Agente: $agente";
  if (scalar @$umbrales > 0) {
    $umbral = join("|", @$umbrales);
  } else {
    $umbral = '.*';
  }
  #say "Umbral: $umbral";
  if (scalar @$tipos > 0) {
    $tipo = join("|", @$tipos);
  } else {
    $tipo = '.*';
  }
  #say "Tipo: $tipo";
  if (scalar @$numeros > 0) {
    $numero = join("|", @$numeros);
  } else {
    $numero = '.*';
  }
  #say "Numero: $numero";
  # Recorro los archivos seleccionados
  foreach (@$archivos) {
    $archivo = $_;
    say "Procesando archivo: $archivo";
    open($fh, "<", "$ENV{'PROCDIR'}/$archivo") or open($fh, "<", "$ENV{'REPODIR'}/$archivo") or die "No se pudo abrir el archivo $ENV{'PROCDIR'} $ENV{'REPODIR'} $archivo: $!\n";
    #say "Path: $ENV{'PROCDIR'}/$archivo";
    #say "File Handler: $fh";
    while(<$fh>) {
      chomp;
      $match = 0;
      #say "Registro: $_";
      if ($_ =~ /($central);.*;.*;.*;.*;.*;.*;.*;.*;.*;.*;.*/) {
        #say $_; say "match central "; 
        #print "central-ok ";
        $match++;
      } 
      if ($_ =~ /.*;($agente);.*;.*;.*;.*;.*;.*;.*;.*;.*;.*/) {
        #say $_; say "match agente "; 
        #print "agente-ok ";
        $match++;
      }
      if ($_ =~ /.*;.*;($umbral);.*;.*;.*;.*;.*;.*;.*;.*;.*/) {
        #say $_; say "match umbral "; 
        #print "umbral-ok ";
        $match++;
      }
      if ($_ =~ /.*;.*;.*;($tipo);.*;.*;.*;.*;.*;.*;.*;.*/) {
        #say $_; say "match tipo "; 
        #print "tipo-ok ";
        $match++;
      }
      if ($_ =~ /.*;.*;.*;.*;.*;.*;($numero);.*;.*;.*;.*/) {
        #say $_; say "match numero "; 
        #print "numero-ok ";
        $match++;
      }
      if ($desde and $hasta) {
        if ($_ =~ /.*;.*;.*;.*;.*;(.*);.*;.*;.*;.*;.*;.*/ and $1 > $desde and $1 < $hasta) {
          #say $_; say "match rango tiempo "; 
          #print "rango-ok ";
          $match++;
        }
      } else { 
        #say $_; say "match rango tiempo "; 
        #print "rango-ok ";
        $match++;
      }
      if ($match >= 6) {
        push(@resultados, $_);
      }
      
    }
    close $fh;
  }
  $fh = '';
 
  #DEBUG
  #say "Resultados:"; 
  #print "$_\n" for sort @resultados;
  #<STDIN>;

  return @resultados;
} # Fin: procesar_archivos

# =============================================================================
# Resuelve consultas sobre los archivos de llamadas sospechosas
# =============================================================================
sub resolver_consulta {
  my $grabar = $_[0];

  # SELECCION DE ARCHIVOS
  my @arch_seleccionados;

  # SELECCION DE CENTRALES
  my @centrales_disponibles;
  open(my $fh, "<", "$ENV{'MAEDIR'}/CdC.mae") or die "No se pudo abrir el archivo: $!\n";
  while(<$fh>) { chomp; 
    $_ =~ /(.*);.*/ || next; 
    push(@centrales_disponibles, $1); } 
  close $fh;
  my @centrales_seleccionadas;

  # SELECCION DE AGENTES
  my @agentes_disponibles;
  open(my $fh, "<", "$ENV{'MAEDIR'}/agentes.mae") or die "No se pudo abrir el archivo: $!\n";
  while(<$fh>) { chomp; 
    $_ =~ /.*;.*;(.*);.*;.*/ || next; 
    push(@agentes_disponibles, $1); } 
  close $fh;
  my @agentes_seleccionados;

  # SELECCION DE UMBRALES
  my @umbrales_disponibles;
  open(my $fh, "<", "$ENV{'MAEDIR'}/umbral.tab") or die "No se pudo abrir el archivo: $!\n";
  while(<$fh>) { chomp; 
    $_ =~ /(.*);.*;.*;.*;.*;.*;.*/ || next; 
    push(@umbrales_disponibles, $1); } 
  close $fh;
  my @umbrales_seleccionados;
  
  # SELECCION TIPO DE LLAMADA
  my @tipos_disponibles = qw(LOC DDN DDI);
  my @tipos_seleccionados;

  while ($op0 != 4) {
    $cant_seleccionados = scalar @arch_seleccionados;
    $cant_filtros = 0;
    $cant_filtros++ if scalar(@centrales_seleccionadas) > 0;
    $cant_filtros++ if scalar(@agentes_seleccionados) > 0;
    $cant_filtros++ if scalar(@umbrales_seleccionados) > 0;
    $cant_filtros++ if scalar(@tipos_seleccionados) > 0;
    $cant_filtros++ if $desde_conversacion ne '';
    $cant_filtros++ if scalar(@numeros_seleccionados) > 0;
    &clear;
    say "*****************************************";
    say "MENU : Principal - Filtros";
    say "1 - Seleccionar Archivos ($cant_seleccionados archivos)";
    say "2 - Seleccionar Filtros ($cant_filtros filtros)";
    if ($grabar) { 
      say "3 - Generar Reporte en Archivo";
    } else {
      say "3 - Generar Reporte por Pantalla";
    }
    say "4 - Salir";
    say "*****************************************";
    say "Seleccione opcion y presione enter.";
    $op0 = <STDIN>;
    if ($op0 == 1) {
      # Selecciona archivos
      $filtro = '';
      while ($filtro ne 'T') {
        # Ver los archivos disponibles
        @arch_disponibles = ();
        @arch_sosp_disponibles = glob "$ENV{'PROCDIR'}/*";
        @arch_sosp_disponibles = map m|([^/]+)$|, @arch_sosp_disponibles;
        @arch_prev_disponibles = glob "$ENV{'REPODIR'}/*";
        @arch_prev_disponibles = map m|([^/]+)$|, @arch_prev_disponibles;
        push(@arch_disponibles, @arch_sosp_disponibles);
        push(@arch_disponibles, @arch_prev_disponibles);
        # Quitamos el subdirectorio
        @arch_disponibles = grep(!/^proc$/, @arch_disponibles);
        @arch_disponibles = grep(!/^estadisticas$/, @arch_disponibles);
        &clear;
        say "*****************************************";
        say "MENU : Seleccionar Archivos";
        say "Archivos disponibles: ";
        print join(" ", @arch_disponibles); print("\n");
        say "Archivos seleccionados: ";
        print join(" ", @arch_seleccionados); print("\n");
        say "*****************************************";
        say "Agregar archivo por oficina o aniomes, blanco para seleccionar todos, T para terminar, B para borrar todos:";
        chomp($filtro = <STDIN>);
        if ($filtro eq "T") {
          # Sale sin filtrar
        } elsif ($filtro eq "B") {
          @arch_seleccionados = (); # Borrar toda la seleccion
        } else {
          push(@arch_seleccionados, grep(/.*$filtro.*/, @arch_disponibles));
          @arch_seleccionados = uniq(@arch_seleccionados);
        }
      }
    }
    if ($op0 == 2) {
      $op2 = "";
      while ($op2 != 7) {
        $cant_centrales = scalar @centrales_seleccionadas;
        $cant_agentes = scalar @agentes_seleccionados;
        $cant_umbrales = scalar @umbrales_seleccionados;
        $cant_numeros = scalar @numeros_seleccionados;
        &clear;
        say "*****************************************";
        say "MENU : Seleccionar Filtros";
        say "1 - Central ($cant_centrales centrales)";
        say "2 - Agente ($cant_agentes agentes)";
        say "3 - Umbral ($cant_umbrales umbral)";
        say "4 - Tipo de llamada (@tipos_seleccionados)";
        say "5 - Tiempo conversacion (desde $desde_conversacion hasta $hasta_conversacion)";
        say "6 - Numero A ($cant_numeros numeros)";
        say "7 - Menu principal";
        say "*****************************************";
        say "Seleccione opcion y presione enter.";
        $op2 = <STDIN>;
        if ($op2 == 1) {
          # Selecciona centrales
          $filtro = '';
          while ($filtro ne 'T') {
            &clear;
            say "*****************************************";
            say "MENU : Seleccionar Centrales";
            say "Centrales disponibles: ";
            print join(" ", @centrales_disponibles); print("\n");
            say "Centrales seleccionadas: ";
            print join(" ", @centrales_seleccionadas); print("\n");
            say "*****************************************";
            say "Agregar por codigo de central, blanco para seleccionar todas, T para terminar, B para borrar todas:";
            chomp($filtro = <STDIN>);
            if ($filtro eq "T") {
              # Sale sin filtrar
            } elsif ($filtro eq "B") {
              @centrales_seleccionadas = (); # Borrar toda la seleccion
            } else {
              push(@centrales_seleccionadas, grep(/$filtro/, @centrales_disponibles));
              @centrales_seleccionadas = uniq(@centrales_seleccionadas);
            }
          }
        }
        if ($op2 == 2) {
          # Selecciona agentes
          $filtro = '';
          while ($filtro ne 'T') {
            &clear;
            say "*****************************************";
            say "MENU : Seleccionar Agentes";
            say "Agentes disponibles: ";
            print join(" ", @agentes_disponibles); print("\n");
            say "Agentes seleccionadas: ";
            print join(" ", @agentes_seleccionados); print("\n");
            say "*****************************************";
            say "Agregar por codigo de agente, blanco para seleccionar todas, T para terminar, B para borrar todas:";
            chomp($filtro = <STDIN>);
            if ($filtro eq "T") {
              # Sale sin filtrar
            } elsif ($filtro eq "B") {
              @agentes_seleccionados = (); # Borrar toda la seleccion
            } else {
              push(@agentes_seleccionados, grep(/^$filtro.*/, @agentes_disponibles));
              @agentes_seleccionados = uniq(@agentes_seleccionados);
            }
          }
        }
        if ($op2 == 3) {
          # Selecciona umbrales
          $filtro = '';
          while ($filtro ne 'T') {
            &clear;
            say "*****************************************";
            say "MENU : Seleccionar Umbrales";
            say "Umbrales disponibles: ";
            print join(" ", @umbrales_disponibles); print("\n");
            say "Umbrales seleccionados: ";
            print join(" ", @umbrales_seleccionados); print("\n");
            say "*****************************************";
            say "Agregar por codigo de umbral, blanco para seleccionar todas, T para terminar, B para borrar todas:";
            chomp($filtro = <STDIN>);
            if ($filtro eq "T") {
              # Sale sin filtrar
            } elsif ($filtro eq "B") {
              @umbrales_seleccionados = (); # Borrar toda la seleccion
            } else {
              push(@umbrales_seleccionados, grep(/^$filtro$/, @umbrales_disponibles));
              @umbrales_seleccionados = uniq(@umbrales_seleccionados);
            }
          }
        }
        if ($op2 == 4) {
          # Selecciona tipo de llamada
          $filtro = '';
          while ($filtro ne 'T') {
            &clear;
            say "*****************************************";
            say "MENU : Seleccionar Tipos";
            say "Tipos disponibles: ";
            print join(" ", @tipos_disponibles); print("\n");
            say "Tipos seleccionadas: ";
            print join(" ", @tipos_seleccionados); print("\n");
            say "*****************************************";
            say "Agregar por codigo de agente, blanco para seleccionar todas, T para terminar, B para borrar todas:";
            chomp($filtro = <STDIN>);
            if ($filtro eq "T") {
              # Sale sin filtrar
            } elsif ($filtro eq "B") {
              @tipos_seleccionados = (); # Borrar toda la seleccion
            } else {
              push(@tipos_seleccionados, grep(/$filtro/, @tipos_disponibles));
              @tipos_seleccionados = uniq(@tipos_seleccionados);
            }
          }
        }
        if ($op2 == 5) {
          # Selecciona rango conversacion
          $filtro = '';
          while ($filtro ne 'T') {
            &clear;
            say "*****************************************";
            say "MENU : Seleccionar Rango Conversacion";
            say "*****************************************";
            print "Desde: ";
            chomp($desde_conversacion = <STDIN>);
            print "Hasta: ";
            chomp($hasta_conversacion = <STDIN>);
            $filtro = "T";
          }
        }
        if ($op2 == 6) {
          # Selecciona numeros
          $filtro = '';
          while ($filtro ne 'T') {
            &clear;
            say "*****************************************";
            say "MENU : Seleccionar Numeros A";
            say "Numeros seleccionados: ";
            print join(" ", @numeros_seleccionados); print("\n");
            say "*****************************************";
            say "Agregar numero A (formato: <area;numero>), T para terminar, B para borrar todos:";
            chomp($filtro = <STDIN>);
            if ($filtro eq "T") {
              # Sale sin agregar
            } elsif ($filtro eq "B") {
              @numeros_seleccionados = (); # Borrar toda la seleccion
            } else {
              push(@numeros_seleccionados, $filtro);
              @numeros_seleccionados = uniq(@numeros_seleccionados);
            }
          }
        }
      }
    }
    if ($op0 == 3) { 
      if ($cant_seleccionados > 0 && $cant_filtros > 0) { 
        say "*****************************************";
        say "Procesando $cant_seleccionados archivos con $cant_filtros filtros";
        sleep 2;
        @archivos = @arch_seleccionados;
        @centrales = @centrales_seleccionadas;
        @agentes = @agentes_seleccionados;
        @umbrales = @umbrales_seleccionados;
        @tipos = @tipos_seleccionados;
        @numeros = @numeros_seleccionados;
        @resultados = procesar_archivos(\@archivos, \@centrales, \@agentes, \@umbrales, \@tipos, \@numeros, $desde_conversacion, $hasta_conversacion);
        if ($grabar) {      
          # Definir nombre de archivo de salida
          @reportes_existentes = glob "$ENV{'REPODIR'}/*";
          @reportes_existentes = map(/subllamada\.(...)$/, @reportes_existentes);
          @reportes_existentes = sort @reportes_existentes;
          $ultimo = @reportes_existentes[-1];
          $siguiente = "000";
          $cant = scalar @reportes_existentes;
          if ($cant > 0) {
            $siguiente = $ultimo + 1;
          }
          $extension = sprintf("%03d", $siguiente);
          $salida = "subllamada.$extension";
          &clear;
          say "*****************************************";
          say "Generando reporte en archivo";
          say "Nombre de archivo: $salida";
          print "Cantidad de registros: "; say scalar @resultados;
          say "*****************************************";
          # Grabar en archivo
          open($fhs, ">", "$ENV{'REPODIR'}/$salida") or die "Error: No se puede abrir el archivo de salida: $!"; 
          foreach (@resultados) {
            print $fhs "$_\n";
          }
          close $fhs;
          print "Presione enter para volver al menu principal. "; <STDIN>
        } else {
          &clear;
          say "*****************************************";
          say "Generando reporte por pantalla";
          print "Cantidad de registros: "; say scalar @resultados;
          say "*****************************************";
          print "$_\n" for sort @resultados;
          say "*****************************************";
          print "Presione enter para volver al menu principal. "; <STDIN>
        }
      } else {
        say "Error: Debe seleccionar archivos y filtros.";
        sleep 2;
      }
      # Eliminamos los resultados anteriores
      @resultados = ();
    }    
  }
  
  &clear;
  say "Gracias por utilizar AFRALIST";

  return 0
} # Fin: resolver_consulta

# =============================================================================
# Resuelve estadisticas 
# =============================================================================
sub ranking_centrales {
  my ($archivos, $bandera) = @_;
  &clear;
  say "*****************************************";
  say "Ranking de llamadas sospechosas por central";
  say "*****************************************";

  %centrales = ();
  my @centrales_disponibles;
  open(my $fh, "<", "$ENV{'MAEDIR'}/CdC.mae") or die "No se pudo abrir el archivo: $!\n";
  while(<$fh>) { chomp; 
    $_ =~ /(.*);(.*)/ || next; 
    push(@centrales_disponibles, $1);
    $centrales{$1} = $2;
  } 
  close $fh;

  my %table;
  my %tiempos;
  my $cantidad;
  my $tiempo;
  
  for ($i = 0; $i<= $#centrales_disponibles; $i++) {
    foreach $archivo (@archivos) {
      if ( ! -x "$ENV{'PROCDIR'}/$archivo" ) {
        $central = $centrales_disponibles[$i];
                
        my @listaTiempos;
        open(my $fh, "<", "$ENV{'PROCDIR'}/$archivo") or die "No se pudo abrir el archivo: $!\n";
        while(<$fh>) { chomp; 
          $_ =~ /^$central;[^;]*;[^;]*;[^;]*;[^;]*;([^;]*);[^;]*;[^;]*;[^;]*;[^;]*;[^;]*;[^;]*$/ || next; 
          push(@listaTiempos, $1);
        } 
        close $fh;
        
        my $tiempo = 0;
        foreach $t (@listaTiempos) {
          $tiempo = $tiempo + $t;
        }
        
        $cantidad = `grep "^$central;[^;]*;[^;]*;[^;]*;[^;]*;[^;]*;[^;]*;[^;]*;[^;]*;[^;]*;[^;]*;[^;]*\$" "$ENV{'PROCDIR'}/$archivo" | wc -l`;
        chomp($cantidad);
        if ($table{$central}) {
          $table{$central} = $table{$central} + $cantidad;
          $tiempos{$central} = $tiempos{$central} + $tiempo;
        } else {
          $table{$central} = $cantidad;
          $tiempos{$central} = $tiempo;
        }
      }
    }
  }    

  @resultados = ();
  push(@resultados, "codigo_central;cant_llamadas;desc_central;tiempo_llamadas");
  
  if ($bandera) { # ranking por cantidad de llamadas
    foreach my $llave (sort {$table{$b} <=> $table{$a}} keys %table) {
      push(@resultados, "$llave;$table{$llave};$centrales{$llave};$tiempos{$llave}");
      print("codigo_central: $llave"); print(", cant_llamadas: $table{$llave}"); print(", desc_central: $centrales{$llave}"); print(", tiempo_llamadas: $tiempos{$llave}\n");
      print("-------------------------------------------------\n");
    }
  } else { # ranking por tiempo de llamada
    foreach my $llave (sort {$tiempos{$b} <=> $tiempos{$a}} keys %tiempos) {
      push(@resultados, "$llave;$table{$llave};$centrales{$llave};$tiempos{$llave}");
      print("codigo_central: $llave"); print(", cant_llamadas: $table{$llave}"); print(", desc_central: $centrales{$llave}"); print(", tiempo_llamadas: $tiempos{$llave}\n");
      print("-------------------------------------------------\n");
    }
  }

  return @resultados;
} # Fin: ranking_centrales

# =============================================================================
# Resuelve el ranking de llamadas sospechosas por oficina 
# =============================================================================
sub ranking_oficinas {
  my ($archivos, $bandera) = @_;
  &clear;
  say "*****************************************";
  say "Ranking de llamadas sospechosas por oficina";
  say "*****************************************";

  @oficinas = map(/(...)_.*$/, @archivos);
  @oficinas = uniq(@oficinas);

  my %tiempos;
  my $cantidad;
  my $tiempo;

  foreach $oficina (@oficinas) {
    #say "oficina: $oficina";
    $table{$oficina} = 0;
    $tiempos{$oficina} = 0;
    @recorrer = grep(/$oficina/, @archivos);
    #say "recorrer: @recorrer";
    foreach $archivo (@recorrer) {
      #say "archivo: $archivo";
      $cantidad = `cat "$ENV{'PROCDIR'}/$archivo" | wc -l`;
            
      my @listaTiempos;
      open(my $fh, "<", "$ENV{'PROCDIR'}/$archivo") or die "No se pudo abrir el archivo: $!\n";
      while(<$fh>) { chomp; 
        $_ =~ /^[^;]*;[^;]*;[^;]*;[^;]*;[^;]*;([^;]*);[^;]*;[^;]*;[^;]*;[^;]*;[^;]*;[^;]*$/ || next; 
        push(@listaTiempos, $1);
      } 
      close $fh;
      
      my $tiempo = 0;
      foreach $t (@listaTiempos) {
        $tiempo = $tiempo + $t;
      }

      $table{$oficina} = $table{$oficina} + $cantidad;
      $tiempos{$oficina} = $tiempos{$oficina} + $tiempo;
    }
  }

  @resultados = ();
  push(@resultados, "codigo_oficina;cant_llamadas;tiempo_llamadas");
  
  if ($bandera) { # ranking por cantidad de llamadas
    foreach my $llave (sort {$table{$b} <=> $table{$a}} keys %table) {
      push(@resultados, "$llave;$table{$llave};$tiempos{$llave}");
      print("codigo_oficina: $llave, cant_llamadas: $table{$llave}, tiempo_llamadas: $tiempos{$llave}\n");
    }
  } else { # ranking por tiempo de llamada
    foreach my $llave (sort {$tiempos{$b} <=> $tiempos{$a}} keys %tiempos) {
      push(@resultados, "$llave;$table{$llave};$tiempos{$llave}");
      print("codigo_oficina: $llave, cant_llamadas: $table{$llave}, tiempo_llamadas: $tiempos{$llave}\n");
    }
  }
  
  return @resultados;
} # Fin: ranking_oficinas

# =============================================================================
# Resuelve el ranking de llamadas sospechosas por agente
# =============================================================================
sub ranking_agentes {
  my ($archivos, $bandera) = @_;
  &clear;
  say "*****************************************";
  say "Ranking de llamadas sospechosas por agente";
  say "*****************************************";

  %agentes = ();
  my @agentes_disponibles;
  #print("$ENV{'MAEDIR'}/agentes.mae\n");
  open(my $fh, "<", "$ENV{'MAEDIR'}/agentes.mae") or die "No se pudo abrir el archivo: $!\n";
  while(<$fh>) { chomp; 
    $_ =~ /^[^;]*;[^;]*;([^;]*);([^;]*);([^;]*)$/ || next; 
    push(@agentes_disponibles, $1);
    $agentes{$1} = $2 . " - " . $3;
  } 
  close $fh;

  my %hashCantidades;
  my %tiempos;
  my $cantidad;
  my $tiempo;

  for ($i = 0; $i<= $#agentes_disponibles; $i++) {
    foreach $archivo (@archivos) {
      if ( ! -x "$ENV{'PROCDIR'}/$archivo" ) {
        $agente = $agentes_disponibles[$i];
        $cantidad = `grep "^[^;]*;$agente;[^;]*;[^;]*;[^;]*;[^;]*;[^;]*;[^;]*;[^;]*;[^;]*;[^;]*;[^;]*\$" "$ENV{'PROCDIR'}/$archivo" | wc -l`;
        chomp($cantidad);
        
        my @listaTiempos;
        open(my $fh, "<", "$ENV{'PROCDIR'}/$archivo") or die "No se pudo abrir el archivo: $!\n";
        while(<$fh>) { chomp; 
          $_ =~ /^[^;]*;$agente;[^;]*;[^;]*;[^;]*;([^;]*);[^;]*;[^;]*;[^;]*;[^;]*;[^;]*;[^;]*$/ || next; 
          push(@listaTiempos, $1);
        } 
        close $fh;

        my $tiempo = 0;
        foreach $t (@listaTiempos) {
          $tiempo = $tiempo + $t;
        }

        if ($hashCantidades{$agente}) {
          $hashCantidades{$agente} = $hashCantidades{$agente} + $cantidad;
          $tiempos{$agente} = $tiempos{$agente} + $tiempo;
        } else {
          $hashCantidades{$agente} = $cantidad;
          $tiempos{$agente} = $tiempo;
        }
      }
    }
  }    

  @resultados = ();
  push(@resultados, "agente;cant_llamadas;oficina-email;tiempo_llamadas");
  
  if ($bandera) { # ranking por cantidad de llamadas
    foreach my $llave (sort {$hashCantidades{$b} <=> $hashCantidades{$a}} keys %hashCantidades) {
      push(@resultados, "$llave;$hashCantidades{$llave};$agentes{$llave};$tiempos{$llave}");
      print("agente: $llave\n"); print("cantidad: $hashCantidades{$llave}\n"); print("oficina - e-mail: $agentes{$llave}"."\n");
      print("tiempo_llamadas: $tiempos{$llave}"."\n");
      print("----------------------------------------------------------------------------\n");
    }
  } else { # ranking por tiempo de llamada
    foreach my $llave (sort {$tiempos{$b} <=> $tiempos{$a}} keys %tiempos) {
      push(@resultados, "$llave;$hashCantidades{$llave};$agentes{$llave};$tiempos{$llave}");
      print("agente: $llave\n"); print("cantidad: $hashCantidades{$llave}\n"); print("oficina - e-mail: $agentes{$llave}"."\n");
      print("tiempo_llamadas: $tiempos{$llave}"."\n");
      print("----------------------------------------------------------------------------\n");
    }
  }
  
  return @resultados;
} # Fin: ranking_agentes

# =============================================================================
# Resuelve el ranking de llamadas sospechosas por destinos
# =============================================================================
sub ranking_destinos {
  my ($archivos) = @_;
  &clear;
  say "*****************************************";
  say "Ranking de llamadas sospechosas por destino";
  say "*****************************************";

  #cargamos paises
  %paises = ();
  open(my $fh, "<", "$ENV{'MAEDIR'}/CdP.mae") or die "No se pudo abrir el archivo: $!\n";
  while(<$fh>) { chomp; 
    $_ =~ /^([^;]*);([^;]*)$/ || next; 
    $paises{$1} = $2;
  } 
  close $fh;

  #cargamos provincias
  %provincias = ();
  open(my $fh, "<", "$ENV{'MAEDIR'}/CdA.mae") or die "No se pudo abrir el archivo: $!\n";
  while(<$fh>) { chomp; 
    $_ =~ /^([^;]*);([^;]*)$/ || next; 
    $provincias{$2} = $1;
  } 
  close $fh;

  my %hashCantidades;
  my %hashLugar;
  my $cantidad;

  @resultados = ();
  push(@resultados, "destino;cant_llamadas;lugar");

  foreach $archivo (@archivos) {

    open($fh, "<", "$ENV{'PROCDIR'}/$archivo") or die "No se pudo abrir el archivo $ENV{'PROCDIR'} $archivo: $!\n";
    while(<$fh>) { chomp; 
      $_ =~ /^[^;]*;[^;]*;[^;]*;[^;]*;[^;]*;[^;]*;[^;]*;[^;]*;([^;]*);([^;]*);([^;]*);[^;]*$/ || next; 
      $codigoPais=$1;
      $codigoArea=$2;
      $numeroLinea=$3;
      if ($hashCantidades{$codigoPais.$codigoArea.$numeroLinea}) {
        $hashCantidades{$codigoPais.$codigoArea.$numeroLinea} = $hashCantidades{$codigoPais.$codigoArea.$numeroLinea} + 1;
      } else {
        $hashCantidades{$codigoPais.$codigoArea.$numeroLinea} = 1;
      }
      if ($codigoPais) {
        $hashLugar{$codigoPais.$codigoArea.$numeroLinea} = $paises{$codigoPais};
      } else {
        $hashLugar{$codigoPais.$codigoArea.$numeroLinea} = $provincias{$codigoArea};
      }
    }
    close $fh;
    $fh = '';
  }

  foreach my $llave (sort {$hashCantidades{$b} <=> $hashCantidades{$a}} keys %hashCantidades) {
    push(@resultados, "$llave;$hashCantidades{$llave};$hashLugar{$llave}");
    print("numero destino: $llave\n");
    print("cantidad: $hashCantidades{$llave}\n");
    print("lugar: $hashLugar{$llave}\n");
    print("----------------------------------------------\n");
  }

  return @resultados;
} # Fin: ranking_destinos

# =============================================================================
# Resuelve el ranking de llamadas sospechosas por umbrales
# =============================================================================
sub ranking_umbrales {
  my ($archivos) = @_;
  &clear;
  say "*****************************************";
  say "Ranking de llamadas sospechosas por umbrales";
  say "*****************************************";

  @resultados = ();
  push(@resultados, "umbral;cant_llamadas");

  my %hashCantidades;
  my $cantidad;

  foreach $archivo (@archivos) {

    open($fh, "<", "$ENV{'PROCDIR'}/$archivo") or die "No se pudo abrir el archivo $ENV{'PROCDIR'} $archivo: $!\n";
    while(<$fh>) { chomp; 
      $_ =~ /^[^;]*;[^;]*;([^;]*);[^;]*;[^;]*;[^;]*;[^;]*;[^;]*;[^;]*;[^;]*;[^;]*;$/ || next; 
      $codigoUmbral=$1;
      if ($hashCantidades{$codigoUmbral}) {
        $hashCantidades{$codigoUmbral} = $hashCantidades{$codigoUmbral} + 1;
      } else {
        $hashCantidades{$codigoUmbral} = 1;
      }
    }
    close $fh;
    $fh = '';
  }

  foreach my $llave (sort {$hashCantidades{$b} <=> $hashCantidades{$a}} keys %hashCantidades) {
    if ($hashCantidades{$llave} > 1) {
      push(@resultados, "$llave;$hashCantidades{$llave}");
      print("id umbral: $llave\n");
      print("cantidad: $hashCantidades{$llave}\n");
      print("----------------------------------------------\n");
    }
  }
  
  return @resultados;
} # Fin: ranking_umbrales

# =============================================================================
# Resuelve estadisticas sobre los archivos de llamadas sospechosas
# =============================================================================
sub resolver_estadistica {
  my $grabar = $_[0];

  my @seleccionados;

  say "qwe $op0";
  $op0 = 99;
  while ($op0 != 0) {
    $cant_seleccionados = scalar @seleccionados;
    $tiempos = 1;
    &clear;
    say "*****************************************";
    say "MENU : Principal - Estadisticas";
    say "1 - Seleccionar Filtro Periodo AñoMes ($cant_seleccionados archivos)";
    say "2 - Ranking de llamadas sospechosas por central (x cantidad)";
    say "3 - Ranking de llamadas sospechosas por central (x tiempo)";
    say "4 - Ranking de llamadas sospechosas por oficina (x cantidad)";
    say "5 - Ranking de llamadas sospechosas por oficina (x tiempo)";
    say "6 - Ranking de llamadas sospechosas por agente (x cantidad)";
    say "7 - Ranking de llamadas sospechosas por agente (x tiempo)";
    say "8 - Ranking de llamadas sospechosas por destino";
    say "9 - Ranking de llamadas sospechosas por umbrales";
    say "0 - Salir";
    say "*****************************************";
    say "Seleccione opcion y presione enter.";
    $op0 = <STDIN>;
    if ($op0 == 1) {
      # Seleccionar los filtros
      # El filtro es el periodo aniollamadamesllamada (un periodo, un rango de periodos, todos los periodos)
      # Selecciona archivos
      $filtro = '';
      while ($filtro ne 'T') {
        # Ver los archivos disponibles
        @disponibles = ();
        @disponibles = glob "$ENV{'PROCDIR'}/*";
        @disponibles = map m|([^/]+)$|, @disponibles;
        # Quitamos el subdirectorio
        @disponibles = grep(!/^proc$/, @disponibles);
        &clear;
        say "*****************************************";
        say "MENU : Seleccionar Archivos";
        say "Archivos disponibles: ";
        print join(" ", @disponibles); print("\n");
        say "Archivos seleccionados: ";
        print join(" ", @seleccionados); print("\n");
        say "*****************************************";
        say "Agregar archivos por aniomes, blanco para seleccionar todos, T para terminar, B para borrar todos:";
        chomp($filtro = <STDIN>);
        if ($filtro eq "T") {
          # Sale sin filtrar
        } elsif ($filtro eq "B") {
          @seleccionados = (); # Borrar toda la seleccion
        } else {
          push(@seleccionados, grep(/.*$filtro.*/, @disponibles));
          @seleccionados = uniq(@seleccionados);
        }
      }

    }
    $cant_seleccionados = scalar @seleccionados;
    @resultados = ();
    if ($op0 == 2 && $cant_seleccionados > 0) {
      # Cuál es la central con mayor cantidad de llamadas sospechosas? // Cual es el ranking de centrales?
      #   Mostrar además del código, la descripción de la central
      @archivos = @seleccionados;
      @resultados = ranking_centrales(\@archivos, $tiempos);
      unless ($grabar) {print "Presione enter para volver al menu principal. "; <STDIN>;}
    }
    if ($op0 == 3 && $cant_seleccionados > 0) {
      @archivos = @seleccionados;
      $tiempos = 0;
      @resultados = ranking_centrales(\@archivos, $tiempos);
      unless ($grabar) {print "Presione enter para volver al menu principal. "; <STDIN>;}
    }
    if ($op0 == 4 && $cant_seleccionados > 0) {
      # Cuál es la oficina con mayor cantidad de llamadas sospechosas? // Cual es el ranking de oficinas?
      @archivos = @seleccionados;
      @resultados = ranking_oficinas(\@archivos, $tiempos);
      unless ($grabar) {print "Presione enter para volver al menu principal. "; <STDIN>;}
    }
    if ($op0 == 5 && $cant_seleccionados > 0) {
      @archivos = @seleccionados;
      $tiempos = 0;
      @resultados = ranking_oficinas(\@archivos, $tiempos);
      unless ($grabar) {print "Presione enter para volver al menu principal. "; <STDIN>;}
    }
    if ($op0 == 6 && $cant_seleccionados > 0) {
      # Cuál es el agente con mayor cantidad de llamadas sospechosas? // Cual es el ranking de agentes?
      #   Mostar además del id del agente, el correo electrónico y la oficina a la que pertenece
      @archivos = @seleccionados;
      @resultados = ranking_agentes(\@archivos, $tiempos);
      unless ($grabar) {print "Presione enter para volver al menu principal. "; <STDIN>;}
    }
    if ($op0 == 7 && $cant_seleccionados > 0) {
      @archivos = @seleccionados;
      $tiempos = 0;
      @resultados = ranking_agentes(\@archivos, $tiempos);
      unless ($grabar) {print "Presione enter para volver al menu principal. "; <STDIN>;}
    }
    if ($op0 == 8 && $cant_seleccionados > 0) {
      # Cuál es el destino con mayor cantidad de llamadas sospechosas? // Cual es el ranking de destinos?
      #   Mostrar además del código, el nombre del país o el nombre de la ciudad –provincia según corresponda
      @archivos = @seleccionados;
      @resultados = ranking_destinos(\@archivos);
      unless ($grabar) {print "Presione enter para volver al menu principal. "; <STDIN>;}
    }
    if ($op0 == 9 && $cant_seleccionados > 0) {
      # Cuál es el ranking de umbrales?
      #   Para este ranking no evaluar los umbrales con una sola llamada sospechosa.
      @archivos = @seleccionados;
      @resultados = ranking_umbrales(\@archivos);
      unless ($grabar) {print "Presione enter para volver al menu principal. "; <STDIN>;}
    }
    if ($op0 != 0 && !$cant_seleccionados > 0) {
      # Precondicion, debe seleccionar archivos
      say "Error: Debe seleccionar archivos a consultar en la opcion 1.";
      sleep 2;
    }
    # Si se indicó -w (grabar) grabar el resultado
    if ($grabar && scalar @resultados > 0) {      
      &clear;
      say "*****************************************";
      say "Generando reporte en archivo";
      print "Cantidad de registros: "; say scalar @resultados;
      say "*****************************************";
      # Definir nombre de archivo de salida
      print "Ingrese nombre de archivo CSV para guardar el reporte (sin extension): ";
      chomp($nom = <STDIN>);
      $folder = "$ENV{'REPODIR'}/estadisticas";
      $salida = "$folder/$nom.csv";
      say "*****************************************";
      say "Archivo generado: $salida";
      # Grabar en archivo
      mkdir $folder unless -d $folder;
      open($fhs, ">", "$salida") or die "Error: No se puede abrir el archivo de salida: $!"; 
      foreach (@resultados) {
        print $fhs "$_\n";
      }
      close $fhs;
      print "Presione enter para volver al menu principal. "; <STDIN>
    }

  }

  &clear;
  say "Gracias por utilizar AFRALIST";

  return 0
} # Fin: resolver_estadistica

# *****************************************************************************
# MAIN 
# *****************************************************************************
verificar_entorno;
verificar_parametros;
