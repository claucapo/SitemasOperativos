#!/bin/bash 

# El propósito de este comando es detectar la llegada de archivos al directorio NOVEDIR 
#y aceptar o rechazar estos archivos según corresponda"
# 	Es el segundo en orden de ejecución
# 	Es un proceso del tipo “Demonio” :
# 	Se dispara con AFINI o a través del Arrancar
# 	Se detiene a través del Detener
# 	Mueve los archivos a través del MoverA
# 	Graba en el archivo de Log a través del GraLog
# 	Invoca, si corresponde, el siguiente proceso: AFRAUMBR

SLEEP_TIME=20
num_ciclo=0

function log_info(){
    "$BINDIR"/GraLog.sh "AFRARECI" "$1" "INFO"
}

function log_error(){
    "$BINDIR"/GraLog.sh "AFRARECI" "$1" "ERR"
}

#verifica si un archivo es tipo texto
function verificar_tipo(){	
	local f_tipo=`file "$1"`
	local tipo=`echo "$f_tipo" | sed 's/^\(.*\):\(.*\)/\2/g'`	
    local tipo_actual=`echo "$tipo" | grep "text$"`
	if [ "$tipo_actual" == "" ]
	then 
		rechazar_archivo "$1"
		log_info "Rechazado  ${1##*/}  - Tipo invalido : $tipo"
		return 1
	else
		return 0
	fi
}

function verificar_aniomesdia(){
	#ANIOMESDIA debe ser una fecha valida
	#ANIOMESDIA debe ser a lo sumo de un año de antiguedad
	#ANIOMESDIA debe ser menor o igual a la fecha del día.
	local fecha_file=`echo ${1##*/} | sed 's/^\(.*\)_\([1-2][0-9][0-9][0-9]\)\([0-1][0-9]\)\([0-3][0-9]\)/\2\3\4/g'`
	local fecha_desde=`date +%Y%m%d -d "1 year ago"` #en osx no anda pero en ubuntu si..
	local fecha_actual=`date +%Y%m%d`

	#verifico si es una fecha valida
	if ! date -d "${fecha_file:0:4}-${fecha_file:4:2}-${fecha_file:6:2}";
		then 
		log_info "Fecha invalida ${1##*/} - Fecha de archivo tiene valores invalidos"
		rechazar-archivo $1
		return 1
	fi

	#verifico los rangos
	if ! verificar_fecha "$fecha_file" "$fecha_desde" "$fecha_actual" ;
	then
		rechazar_archivo "$1"
		return 1
	fi
	return 0
}

function verificar_fecha(){
	if [ $2 -le $1 -a $1 -le $3]
		then
			return 0
		elif [ $1 -le $3 ]
		then
			log_info "Fecha invalida ${1##*/} - Fecha de archivo inferior a un anio"
		else
			log_info "Fecha invalida ${1##*/} - Fecha de archivo no puede ser superior a la actual."
	fi
	return 1
}

function rechazar_archivo(){
	log_info "Movido ${1##*/} - Destino $RECHDIR/${1##*/}"
	"$BINDIR"/MoverA.sh  "$1" "$RECHDIR" AFRARECI
	return 0
}

# Acepta los archivos con formato de nombre correcto a 
# ACEPDIR/<nombredelArchivo>
# Se graba en el LOG : mensaje aceptado, destino ACEPDIR/<nombre del archivo>

function aceptar_archivo(){
	log_info  "Aceptado ${1##*/} - Destino $ACEPDIR/${1##*/}"
	"$BINDIR"/MoverA.sh "$1" "$ACEPDIR" AFRARECI
	return 0	
}

function get_pid(){
    local pid=`ps -e | grep '\($BINDIR\)\?/$1.sh' | sed 's/ \?\([0-9]*\).*/\1/' | awk '{print $1}' | head -n 1`
    echo $pid
}

function hay_novedades_pendientes(){
  if [ "$(ls -A $1)" ]
  then
    for directorio in $1
     do
      local dir=`find $directorio -type f | wc -l`
	    if [ ! $dir -eq 0 ]
	    then
		    return 0
	    fi
    done
  fi
  return 1
}

# Si existen archivos en los subdirectorios de ACEPDIR se invoca el comando AFRAUMBR
# Si se pudo invocar se graba en LOG: AFRAUMBR corriendo bajo el no.: <Process Id de AFRAUMBR>
# Si hay archivos pero esta corriendo se graba en LOG: Posponer a siguiente Ciclo
# Si surge algun error se muestra por pantalla

function novedades_pedientes(){
	if hay_novedades_pendientes "$ACEPDIR";
		then
		PID=$(get_pid AFRAUMBR)

		if [ "$PID" = "" ]; 
		then
			AFRAUMBR &
			PID=$(get_pid AFRAUMBR)
			log_info "AFRAUMBR corriendo bajo el no.: $PID"
		else
			log_info "Invocacion de AFRAUMBR propuesta para el siguiente ciclo"
		fi
	fi
	return 0
}

#verfica que los archivos tengan cod_central dentro de maestro

function verificar_cod_central(){
		
local cod_central=`echo ${1##*/} | sed 's/^\(.*\)_\(.*\)/\1/g'`

if ! [ grep "^$cod_central;.*;" "$2" &>/dev/null ];
	then
		rechazar_archivo $1
		log_info "Rechazado ${1##*/} - [$cod_central] Central inexistente"
		return 1
	else
		return 0
fi
}

function procesar_novedades(){
	if hay_novedades_pendientes "$NOVEDIR"
		then
		archivos=$(ls "$NOVEDIR")
		for file in ${archivos[@]}
		do
			#1) Verificar si es tipo texto
			if verificar_tipo "$NOVEDIR/$file" ;
			then
				#2) Verificar que el formato del nombre del archivo sea correcto
				#FORMATO CORRECTO: <cod_central>_<aniomesdia>
				if verificar_formato "$NOVEDIR/$file" ; then
					#3) Validar nombre de los archivos
						#cod_central tiene que estar en el maestro de centrales
						#aniomesdia tiene que ser fecha valida, maximo un año de antiguedad
							#y tiene que ser menor que  o igual a la fecha actual
					if verificar_cod_central "$NOVEDIR/$file" "$MAEDIR/CdC.mae" ; then
						if verificar_aniomesdia "$NOVEDIR/$file" ; then
							#4) Si es valido lo anterior se tienene que pasar a ACEPTADOS
							aceptar_archivo "$NOVEDIR/$file"
						fi
					fi
				fi
			fi
		done
	fi
}

#FORMATO CORRECTO: <cod_central>_<aniomesdia>
function verificar_formato(){
	local errorCantidadCampos=""
	local fecha=""
	if ! [[ "${1##*/}" =~ ^[a-zA-Z]{3}_[0-9]{8}\.csv$ ]];
	then
	 	log_info "Rechazado ${1##*/} - Formato de Nombre incorrecto"
	 	rechazar_archivo "$1"
		return 1
	fi	
	return 0
}


while [[ true ]]; do
	log_info "Despertando demonio - Ciclo: $num_ciclo"
	procesar_novedades
	novedades_pedientes
	let num_ciclo++
	log_info "Durmiendo demonio"
	sleep $SLEEP_TIME
done

